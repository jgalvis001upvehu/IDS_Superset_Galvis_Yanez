version: '3.8'

services:
  # ───────────────────────────── Kafka + MQTT ─────────────────────────────
  kafka-connect:
    image: landoop/fast-data-dev:cp3.3.0
    container_name: kafka-connect
    ports: ["8083:8083", "9092:9092"]
    environment:
      KAFKA_HEAP_OPTS: "-Xms128m -Xmx512m"
      ADV_HOST: kafka-connect
      RUNTESTS: 0
      CONNECT_PLUGIN_PATH: /data/jars
    volumes:
      - ./jars:/data/jars
    networks: [kafka-net]

  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    ports: ["1883:1883"]
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks: [kafka-net]

  # ───────────────────────────── Relational stores ─────────────────────────────
  # ───────────────────────────── Superset ─────────────────────────────
  redis:
    image: redis:6.2
    container_name: redis
    ports: ["6379:6379"]
    networks: [kafka-net]

  superset:
    build:
      context: .
      dockerfile: ./superset/Dockerfile_superset
    container_name: superset
    ports: ["8088:8088"]
    volumes:
      - ./superset:/app/superset_home
    environment:
      SUPERSET_CONFIG_PATH: /app/superset_home/superset_config.py
      REDIS_URL: redis://redis:6379/0
    depends_on: [kafka-connect, redis]
    networks: [kafka-net]

  # ───────────────────────────── Sender (tweets → MQTT) ─────────────────────────────
  sender:
    build:
      context: ./sender
      dockerfile: Dockerfile_sender
    volumes:
      - ./data:/app/data
    depends_on: [mosquitto]
    networks: [kafka-net]

  # ───────────────────────────── Zookeeper ─────────────────────────────
  zookeeper:
    image: zookeeper:3.5.10
    container_name: zookeeper
    ports: ["2181:2181"]
    environment:
      ZOO_MY_ID: 1
    networks: [kafka-net]

  # ───────────────────────────── Druid cluster ─────────────────────────────
  
#  coordinator:
#    image: apache/druid:33.0.0
#    container_name: coordinator
#    volumes:
#      - druid_shared:/opt/shared
#      - coordinator_var:/opt/druid/var
#    depends_on: [zookeeper, postgres]
#    ports: ["8081:8081"]
#    command: ["coordinator"]
#    env_file:
#      - env/coordinator.env
#    networks: [kafka-net]
#
#  broker:
#    image: apache/druid:33.0.0
#    container_name: broker
#    volumes:
#      - broker_var:/opt/druid/var
#    depends_on: [zookeeper, postgres, coordinator]
#    ports: ["8082:8082"]
#    command: ["broker"]
#    env_file:
#      - env/common.env
#    networks: [kafka-net]
#
#  historical:
#    image: apache/druid:33.0.0
#    container_name: historical
#    volumes:
#      - druid_shared:/opt/shared
#      - historical_var:/opt/druid/var
#    depends_on: [zookeeper, postgres, coordinator]
#    ports: ["8085:8085"]
#    command: ["historical"]
#    env_file:
#      - env/common.env
#    networks: [kafka-net]
#
#  middlemanager:
#    image: apache/druid:33.0.0
#    container_name: middlemanager
#    volumes:
#      - druid_shared:/opt/shared
#      - middle_var:/opt/druid/var
#    depends_on: [zookeeper, postgres, coordinator]
#    ports:
#      - "8091:8091"
#      - "8100-8105:8100-8105"
#    command: ["middleManager"]
#    env_file:
#      - env/middlemanager.env
#    networks: [kafka-net]
#
#  router:
#    image: apache/druid:33.0.0
#    container_name: router
#    volumes:
#      - router_var:/opt/druid/var
#    depends_on: [zookeeper, postgres, coordinator]
#    ports: ["8888:8888"]
#    command: ["router"]
#    env_file:
#      - env/common.env
#    networks: [kafka-net]


networks:
  kafka-net:
    name: kafka-net
